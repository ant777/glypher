{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ECAA,IAAM,EAAa,mBAGnB,IAAI,EAAc,EAAE,CACpB,KAAK,gBAAgB,CAAC,UAAW,SAAU,CAAK,EAE5C,EAAM,SAAS,CAAC,OAAO,IAAI,CAAC,GACvB,IAAI,CAAC,SAAU,CAAK,EAEjB,OADA,QAAQ,GAAG,CAAC,gBACL,EAAM,MAAM,CAAC,GAAa,IAAI,CAAC,WAClC,YAAc,CAAA,EACd,QAAQ,GAAG,CAAC,8CAChB,EAEJ,GAAG,IAAI,CAAC,WAKJ,OAAO,KAAK,WAAW,EAC3B,GACR,GACA,KAAK,gBAAgB,CAAC,WAAY,SAAU,CAAK,EAE7C,IAAI,EAAiB,CAAC,EAAW,CACjC,EAAM,SAAS,CAAC,OAAO,IAAI,GAAG,IAAI,CAAC,SAAU,CAAU,EACnD,OAAO,QAAQ,GAAG,CAAC,EAAW,GAAG,CAAC,SAAU,CAAS,EACjD,GAAI,AAAsC,KAAtC,EAAe,OAAO,CAAC,GACvB,OAAO,OAAO,MAAM,CAAC,EAE7B,GACJ,GACJ,GAGA,KAAK,gBAAgB,CAAC,QAAS,SAAU,CAAK,EAC1C,GAAI,AAAyB,QAAzB,EAAM,OAAO,CAAC,MAAM,CAAY,OACpC,IAAM,EAAM,IAAI,IAAI,EAAM,OAAO,CAAC,GAAG,EACpC,EAAM,WAAW,CACV,OAAO,KAAK,CAAC,EAAM,OAAO,CAAE,CAAC,aAAc,CAAA,CAAI,GAC1C,IAAI,CAAC,SAAU,CAAQ,SAEhB,AAAI,IAGA,AAAiD,KAAjD,EAAI,QAAQ,CAAC,OAAO,CAAC,yBAAkC,AAA2C,KAA3C,EAAI,QAAQ,CAAC,OAAO,CAAC,kBAErE,MAAM,IAAI,QAAQ,EAAM,OAAO,CAAE,CAAC,YAAa,OAAQ,KAAM,MAAM,IAEvE,MAAM,EAAM,OAAO,EAC9B,GAIhB,E,G,E","sources":["<anon>","src/service-worker.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirebdb8\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirebdb8\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"4pGFC\", function(module, exports) {\nconst $336a98a23954290e$var$CACHE_NAME = 'glypher-cache-81';\nconst $336a98a23954290e$var$version = '1.0.1';\nvar $336a98a23954290e$var$urlsToCache = [];\nself.addEventListener('install', function(event) {\n    // Perform install steps\n    event.waitUntil(caches.open($336a98a23954290e$var$CACHE_NAME).then(function(cache) {\n        console.log('Opened cache');\n        return cache.addAll($336a98a23954290e$var$urlsToCache).then(function() {\n            __hasUpdate = true;\n            console.log('All resources have been fetched and cached.');\n        });\n    }).then(function() {\n        // `skipWaiting()` forces the waiting ServiceWorker to become the\n        // active ServiceWorker, triggering the `onactivate` event.\n        // Together with `Clients.claim()` this allows a worker to take effect\n        // immediately in the client(s).\n        return self.skipWaiting();\n    }));\n});\nself.addEventListener('activate', function(event) {\n    var cacheWhitelist = [\n        $336a98a23954290e$var$CACHE_NAME\n    ];\n    event.waitUntil(caches.keys().then(function(cacheNames) {\n        return Promise.all(cacheNames.map(function(cacheName) {\n            if (cacheWhitelist.indexOf(cacheName) === -1) return caches.delete(cacheName);\n        }));\n    }));\n});\nself.addEventListener('fetch', function(event) {\n    if (event.request.method !== 'GET') return;\n    const url = new URL(event.request.url);\n    event.respondWith(caches.match(event.request, {\n        ignoreSearch: true\n    }).then(function(response) {\n        // Cache hit - return response\n        if (response) return response;\n        if (url.pathname.indexOf('worker-javascript.js') !== -1 || url.pathname.indexOf('worker-html.js') !== -1) // request = new Request(request, {credentials: 'omit'});\n        return fetch(new Request(event.request, {\n            credentials: 'omit',\n            mode: 'cors'\n        }));\n        return fetch(event.request);\n    }));\n    return;\n});\n\n});\n\n\nparcelRequire(\"4pGFC\");\n\n//# sourceMappingURL=service-worker.6fa8b415.js.map\n","const CACHE_NAME = 'glypher-cache-81';\r\nconst version = '1.0.1';\r\n\r\nvar urlsToCache = [];\r\nself.addEventListener('install', function (event) {\r\n    // Perform install steps\r\n    event.waitUntil(caches.open(CACHE_NAME)\r\n        .then(function (cache) {\r\n            console.log('Opened cache');\r\n            return cache.addAll(urlsToCache).then(function () {\r\n                __hasUpdate = true;\r\n                console.log('All resources have been fetched and cached.');\r\n            });\r\n\r\n        }).then(function () {\r\n            // `skipWaiting()` forces the waiting ServiceWorker to become the\r\n            // active ServiceWorker, triggering the `onactivate` event.\r\n            // Together with `Clients.claim()` this allows a worker to take effect\r\n            // immediately in the client(s).\r\n            return self.skipWaiting();\r\n        }));\r\n});\r\nself.addEventListener('activate', function (event) {\r\n\r\n    var cacheWhitelist = [CACHE_NAME];\r\n    event.waitUntil(caches.keys().then(function (cacheNames) {\r\n        return Promise.all(cacheNames.map(function (cacheName) {\r\n            if (cacheWhitelist.indexOf(cacheName) === -1) {\r\n                return caches.delete(cacheName);\r\n            }\r\n        }));\r\n    }));\r\n});\r\n\r\n\r\nself.addEventListener('fetch', function (event) {\r\n    if (event.request.method !== 'GET') return;\r\n    const url = new URL(event.request.url);\r\n     event.respondWith(\r\n            caches.match(event.request, {ignoreSearch: true})\r\n                .then(function (response) {\r\n                        // Cache hit - return response\r\n                        if (response) {\r\n                            return response;\r\n                        }\r\n                        if (url.pathname.indexOf('worker-javascript.js') !== -1 || url.pathname.indexOf('worker-html.js') !== -1) {\r\n                            // request = new Request(request, {credentials: 'omit'});\r\n                            return fetch(new Request(event.request, {credentials: 'omit', mode: 'cors'}));\r\n                        }\r\n                        return fetch(event.request);\r\n                    }\r\n                )\r\n        );\r\n        return;\r\n    }\r\n);\r\n\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$336a98a23954290e$var$CACHE_NAME","$336a98a23954290e$var$urlsToCache","self","addEventListener","event","waitUntil","caches","open","then","cache","console","log","addAll","__hasUpdate","skipWaiting","cacheWhitelist","keys","cacheNames","Promise","all","map","cacheName","indexOf","delete","request","method","url","URL","respondWith","match","ignoreSearch","response","pathname","fetch","Request","credentials","mode"],"version":3,"file":"service-worker.6fa8b415.js.map"}